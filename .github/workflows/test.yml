name: Test

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "Sources/**"
      - "Tests/**"
      - "Package.swift"
      - "Example/**"
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: ["main"]
    paths:
      - "Sources/**"
      - "Tests/**"
      - "Package.swift"
      - "Example/**"

jobs:
  test:
    name: ${{ matrix.test-type }} Tests
    runs-on: macos-15
    strategy:
      matrix:
        test-type: [Llama, MLX]
    env:
      DEVELOPER_DIR: "/Applications/Xcode_16.3.app/Contents/Developer"
      TEST_RUNNER_GITHUB_MODEL_CACHE: "${{ github.workspace }}/model_cache"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache model file
        id: cache-model
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/model_cache
          key: model_cache

      - name: Run ${{ matrix.test-type }} tests
        run: TEST_RUNNER_GITHUB_ACTIONS_TEST="${{ matrix.test-type }}" xcodebuild test -scheme LocalLLMClient-Package -destination 'platform=macOS'

  build-example:
    runs-on: macos-15
    needs: test
    env:
      DEVELOPER_DIR: "/Applications/Xcode_16.3.app/Contents/Developer"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build Example app for macOS
        run: |
          cd Example
          xcodebuild build -project LocalLLMClientExample.xcodeproj -scheme LocalLLMClientExample -destination 'platform=macOS' CODE_SIGN_IDENTITY="-"

  test-linux:
    name: Linux Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: '6.0'

      - name: Install system dependencies for llama.cpp
        run: |
          sudo apt-get update
          sudo apt-get install -y libvulkan-dev # Example, more might be needed

      - name: Build Llama Components
        run: swift build --target LocalLLMClientLlamaC --target LocalLLMClientLlama
        # If the above fails, `swift build --product LocalLLMClientLlama` might be an alternative
        # or simply `swift build --build-tests` before `swift test`

      - name: Run Swift Tests
        run: swift test --enable-experimental-swift-testing
